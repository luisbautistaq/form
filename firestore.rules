/**
 * @file Overview
 * This ruleset enforces a role-based access control model with an "admin" role determined by the presence of an AdminUser document.
 * Data is organized into top-level collections for landing pages and forms, with form submissions stored as subcollections.
 *
 * @data_structure
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content.
 * - /forms/{formId}: Stores form definitions.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions related to a specific form.
 * - /admin_users/{adminUserId}: Stores admin user profiles; presence grants admin role.
 *
 * @key_security_decisions
 * - Admin role is determined by the existence of a document in /admin_users/{userId}.
 * - Form submissions are stored as subcollections of forms to enable secure list operations.
 * - The `formId` is denormalized into the `FormSubmission` documents to facilitate authorization checks without extra `get()` calls.
 * - Anonymous users are allowed to create form submissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): Any user can read landing page content.
     * @allow (create, update, delete): Only admins can modify landing page content.
     * @deny (create, update, delete): Non-admin users cannot modify landing page content.
     * @principle Requires admin role for write operations.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to form definitions.
     * @path /forms/{formId}
     * @allow (get, list): Any user can read form definitions.
     * @allow (create, update, delete): Only admins can modify form definitions.
     * @deny (create, update, delete): Non-admin users cannot modify form definitions.
     * @principle Requires admin role for write operations.
     */
    match /forms/{formId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to form submissions.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create): Any authenticated user can submit a form.
     * @allow (get, list): Only admins can access form submissions.
     * @deny (create): Unauthenticated users cannot submit forms.
     * @deny (get, list): Non-admin users cannot access form submissions.
     * @principle Allows public creation, restricts read access to admins.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow create: if isSignedIn();
      allow get, list: if isAdmin();
      allow update, delete: if false; // No updates or deletes allowed on submissions.
    }

    /**
     * @description Controls access to admin user profiles.
     * @path /admin_users/{adminUserId}
     * @allow (get): Any authenticated user can read admin user profiles.
     * @allow (create): Only the user themselves can create their admin profile.
     * @allow (update, delete): Only the user themselves can update or delete their admin profile, and only if the document exists.
     * @deny (create): Creating an admin profile with a mismatched user ID is prohibited.
     * @deny (update, delete): Updating or deleting a non-existent admin profile is prohibited.
     * @principle Enforces ownership for admin profile management.
     */
    match /admin_users/{adminUserId} {
      allow get: if isSignedIn();
      allow create: if isOwner(adminUserId);
      allow update, delete: if isExistingOwner(adminUserId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return True if the user has an admin profile, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param userId The user ID to check against.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}