/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with administrators having broad access and authenticated users being able to submit forms.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content, accessible and editable by admins.
 * - /forms/{formId}: Stores form definitions, accessible and editable by admins.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions, accessible to admins.
 * - /admin_users/{adminUserId}: Stores admin user profiles; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Admin status is determined by the presence of a document in /admin_users/{uid}.
 * - Read access to landing pages is public.
 * - Form submissions are stored as subcollections to enable secure listing.
 * - Open reads for public content, restricted writes for admin-only changes.
 *
 * Denormalization for Authorization:
 * - The `formId` is denormalized into the `FormSubmission` documents to simplify rules and improve performance. This avoids the need for extra `get()` calls to the parent `Form` document when checking submission permissions.
 *
 * Structural Segregation:
 * - Landing page content is stored in a separate collection to allow for public read access without compromising the security of form definitions or submissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to landing page contents, with restricted writes for admins only.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny (create, update, delete): if !isAdmin();
     * @principle Allows public read access while restricting write access to admins.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin-only access to form definitions.
     * @path /forms/{formId}
     * @allow (get, list): if isAdmin();
     * @allow (create, update, delete): if isAdmin();
     * @deny (get, list, create, update, delete): if !isAdmin();
     * @principle Restricts form definition management to admins.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions and admins to manage them.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow create: if isSignedIn();
     * @allow get, list, update, delete: if isAdmin();
     * @deny create: if !isSignedIn();
     * @deny get, list, update, delete: if !isAdmin();
     * @principle Enforces user authentication for submissions and admin control over submission data.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /admin_users/{adminUserId}
     * @allow get: if isAdmin();
     * @allow create: if request.auth.uid == adminUserId;
     * @allow update, delete: if false;
     * @allow list: if false;
     * @deny update, delete: if true;
     * @deny list: if true;
     * @principle Confers admin rights based on document presence.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow create: if request.auth.uid == adminUserId;
      allow update, delete: if false;
      allow list: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator based on the presence of an admin user document.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/(default)/documents/admin_users/$(request.auth.uid));
    }

  }
}