rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to landing page content. Admins can create, update, and delete.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): Any user can read landing page content.
     * @allow (create, update, delete): Only admins can modify landing page content.
     * @deny: Non-admins cannot modify landing page content.
     * @principle: Allows public read access while restricting write access to admins.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to form definitions to admins only.
     * @path /forms/{formId}
     * @allow (get, list): Only admins can read form definitions.
     * @allow (create, update, delete): Only admins can modify form definitions.
     * @deny: Non-admins cannot access or modify form definitions.
     * @principle: Enforces admin-only access to form definitions.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions and admins to read them.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create): Any authenticated user can create a form submission. The formId must match the parent form ID.
     * @allow (get, list): Only admins can read or list form submissions.
     * @allow (update, delete): No one is allowed to update or delete a form submission
     * @deny: Non-authenticated users cannot create form submissions. Non-admins cannot read form submissions.
     * @principle: Enforces authenticated user access for submission creation and admin-only access for reading.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow create: if isSignedIn() && request.resource.data.formId == formId;
      allow get, list: if isAdmin();
      allow update, delete: if false;
    }

    /**
     * @description Restricts access to admin user profiles. Only admins can create new profiles, and only the profile owner can read or update their own profile. Listing is denied.
     * @path /admin_users/{adminUserId}
     * @allow (create): Only admins can create admin user profiles.
     * @allow (get): Only the admin user themselves can read their profile.
     * @allow (update): Only the admin user themselves can update their profile.
     * @deny (list): Listing admin users is not allowed.
     * @deny: Non-admins cannot create, read, or update admin user profiles.
     * @principle: Restricts access to admin user profiles to authorized admins only.
     */
    match /admin_users/{adminUserId} {
      allow create: if isAdmin();
      allow get: if isAdminUser(adminUserId);
      allow update: if isAdminUser(adminUserId);
      allow delete: if false;
      allow list: if false;
    }

    /**
     * @description Secures access to the /forms/main_contact_form document
     * @path /forms/main_contact_form
     * @allow get: if isAdmin()
     * @deny get: if not isAdmin()
    */
    match /forms/main_contact_form {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    // ---- Helper Functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator.
     *              Admin status is determined by the existence of a document in the /admin_users/{uid} collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user matches the admin user ID.
      * @param {string} adminUserId The admin user ID to compare against the authenticated user's ID.
      * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
      */
    function isAdminUser(adminUserId) {
      return request.auth.uid == adminUserId;
    }
  }
}