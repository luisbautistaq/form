/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with admin users having broader permissions.
 * All data is organized into top-level collections for landing pages, forms, and admin users,
 * with form submissions nested as subcollections under their respective forms.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content.
 * - /forms/{formId}: Stores form definitions.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions.
 * - /admin_users/{adminUserId}: Stores admin user profiles.
 *
 * Key Security Decisions:
 * - Listing of form submissions is restricted to authenticated users.
 * - Only existing admin users can create/update/delete landing pages or forms.
 * - Admin status is determined by the existence of a document in /admin_users/{uid}.
 *
 * Denormalization for Authorization:
 * - Form submissions denormalize the `formId`, enabling rules to check the existence of the form without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to landing page contents for admins only.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): if isAdmin()
     * @allow (create, update, delete): if isAdmin()
     * @deny (get, list): if !isAdmin()
     * @deny (create, update, delete): if !isAdmin()
     * @principle Restricts landing page management to administrators.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to forms for admins only.
     * @path /forms/{formId}
     * @allow (get, list): if isAdmin()
     * @allow (create, update, delete): if isAdmin()
     * @deny (get, list): if !isAdmin()
     * @deny (create, update, delete): if !isAdmin()
     * @principle Restricts form management to administrators.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to form submissions, allowing authenticated users to list.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (get, list): if isSignedIn()
     * @allow create: if isSignedIn()
     * @allow update, delete: if false
     * @deny (get, list): if !isSignedIn()
     * @deny create: if !isSignedIn()
     * @principle Ensures only authenticated users can submit and view forms.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants access to admin user profiles for admins only.
     * @path /admin_users/{adminUserId}
     * @allow (get, list): if isAdmin()
     * @allow create, update, delete: if isAdmin()
     * @deny (get, list): if !isAdmin()
     * @deny (create, update, delete): if !isAdmin()
     * @principle Restricts admin user management to administrators.
     */
    match /admin_users/{adminUserId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their document.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
  }
}