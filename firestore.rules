rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to landing page content. Only admins can create, update, or delete landing pages.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow get, list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin() && resource != null;
     * @allow delete: if isAdmin() && resource != null;
     * @deny get, list: if !isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Enforces admin-only access for managing landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to form definitions. Only admins can create, update, or delete forms.
     * @path /forms/{formId}
     * @allow get, list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin() && resource != null;
     * @allow delete: if isAdmin() && resource != null;
     * @deny get, list: if !isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Enforces admin-only access for managing form definitions.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

      /**
       * @description Controls access to form submissions. Anyone can create a form submission; only admins can read, update, or delete submissions.
       * @path /forms/{formId}/form_submissions/{formSubmissionId}
       * @allow get, list: if isAdmin();
       * @allow create: if true;
       * @allow update: if isAdmin() && resource != null;
       * @allow delete: if isAdmin() && resource != null;
       * @deny get, list: if !isAdmin();
       * @deny update: if !isAdmin();
       * @deny delete: if !isAdmin();
       * @principle Allows public submissions while restricting other operations to admins.
       */
      match /form_submissions/{formSubmissionId} {
        allow get, list: if isAdmin();
        allow create: if true;
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
    }

    /**
     * @description Controls access to admin user profiles. Only admins can create admin user profiles; listing is disallowed to prevent information disclosure.
     * @path /admin_users/{adminUserId}
     * @allow get: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin() && resource != null;
     * @allow delete: if isAdmin() && resource != null;
     * @deny get: if !isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @deny list: if true;
     * @principle Enforces admin-only access for managing admin user profiles and prevents listing of admin users.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
      allow list: if false;
    }
  }

  // Helper function to check if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to check if the user is an admin based on the existence of an admin profile.
  function isAdmin() {
    return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
  }

  // Helper function to check if the user owns the document (based on document ID and user ID).
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  //Helper function to check if the user is an existing owner of the document
  function isExistingOwner(userId) {
    return (isOwner(userId) && resource.data.userId == userId);
  }
}