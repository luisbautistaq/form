/**
 * @file Firestore Security Rules for FormForge
 *
 * Core Philosophy:
 * This ruleset prioritizes security through explicit authorization checks,
 * focusing on admin-only content management and allowing public form submissions.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content, managed by admins.
 * - /forms/{formId}: Stores form definitions, managed by admins.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions. Publicly writable.
 * - /admin_users/{adminUserId}: Presence grants admin privileges.
 *
 * Key Security Decisions:
 * - Public form submissions are allowed for all forms.
 * - Only admins can create, update, and delete landing pages and form definitions.
 * - Listing of documents is generally allowed unless explicitly restricted.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in the `/admin_users/{uid}` collection,
 *   eliminating the need for `get()` calls to a separate roles collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin access to manage landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (create, update, delete) if request.auth exists and the user is an admin.
     * @deny (create, update, delete) if request.auth does not exist.
     * @principle Enforces admin-only write access.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to manage form definitions.
     * @path /forms/{formId}
     * @allow (create, update, delete) if request.auth exists and the user is an admin.
     * @deny (create, update, delete) if request.auth does not exist.
     * @principle Enforces admin-only write access.
     */
    match /forms/{formId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows anyone to submit forms.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow create if request.auth exists (user is logged in).
     * @deny create if request.auth does not exist (user is not logged in).
     * @principle Allows any signed-in user to create form submissions.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants admin privileges based on the existence of an admin user document.
     * @path /admin_users/{adminUserId}
     * @allow get, list: if false;
     * @allow create: if request.auth.uid == adminUserId;
     * @allow update, delete: if false;
     * @principle Admin privileges are granted by the presence of a document.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if request.auth.uid == adminUserId;
      allow update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
  }
}