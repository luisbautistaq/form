/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset prioritizes simplicity and ease of development for a rapid prototyping phase.
 * It enforces that any logged-in user can perform any action.
 *
 * Data Structure:
 * The data is organized into top-level collections for landing pages, forms, and admin users.
 * Form submissions are stored as subcollections under their respective forms.
 *
 * Key Security Decisions:
 * - All authenticated users have full access to all data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any logged-in user to read and write landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list) Any logged-in user can read landing page content.
     * @allow (create, update, delete) Any logged-in user can create, update, and delete landing page content.
     * @deny (none) No requests are explicitly denied, as any logged-in user can do everything.
     * @principle Grants full access to any logged-in user for prototyping.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any logged-in user to read and write form definitions.
     * @path /forms/{formId}
     * @allow (get, list) Any logged-in user can read form definitions.
     * @allow (create, update, delete) Any logged-in user can create, update, and delete form definitions.
     * @deny (none) No requests are explicitly denied, as any logged-in user can do everything.
     * @principle Grants full access to any logged-in user for prototyping.
     */
    match /forms/{formId} {
      allow get, list, create, update, delete: if isSignedIn();

        /**
         * @description Allows any logged-in user to read and write form submissions under a specific form.
         * @path /forms/{formId}/form_submissions/{formSubmissionId}
         * @allow (get, list) Any logged-in user can read form submissions.
         * @allow (create, update, delete) Any logged-in user can create, update, and delete form submissions.
         * @deny (none) No requests are explicitly denied, as any logged-in user can do everything.
         * @principle Grants full access to any logged-in user for prototyping.
         */
        match /form_submissions/{formSubmissionId} {
          allow get, list, create, update, delete: if isSignedIn();
        }
    }

    /**
     * @description Allows any logged-in user to read and write admin user profiles.
     * @path /admin_users/{adminUserId}
     * @allow (get, list) Any logged-in user can read admin user profiles.
     * @allow (create, update, delete) Any logged-in user can create, update, and delete admin user profiles.
     * @deny (none) No requests are explicitly denied, as any logged-in user can do everything.
     * @principle Grants full access to any logged-in user for prototyping.
     */
    match /admin_users/{adminUserId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}