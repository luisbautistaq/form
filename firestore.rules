/**
 * @file Firebase Security Rules for FormForge application.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with admin privileges determined by the presence of an AdminUser document.
 * All write operations are restricted to authorized users or admins. Data validation is relaxed for rapid prototyping.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content.
 * - /forms/{formId}: Stores form definitions.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions as a subcollection of forms.
 * - /admin_users/{adminUserId}: Stores admin user profiles; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Listing of form submissions is only allowed for authenticated users.
 * - Admin status is determined by the existence of a document in the /admin_users collection.
 * - Data validation is minimized for prototyping.
 *
 * Denormalization for Authorization:
 * - Admin status is checked via document existence in /admin_users/{uid} to avoid costly get() calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to landing page content. Admins can read and write.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access for managing landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to form definitions. Admins can read and write.
     * @path /forms/{formId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access for managing form definitions.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to form submissions.  Authenticated users can create submissions.
     *              Listing submissions is only allowed with authentication.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create) if isSignedIn()
     * @allow (get, list) if isSignedIn()
     * @allow (update, delete) if isAdmin()
     * @deny (create) if !isSignedIn()
     * @deny (get, list) if !isSignedIn()
     * @deny (update, delete) if !isAdmin()
     * @principle Allows authenticated users to create submissions, restricts listing to authenticated users.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Controls access to admin user profiles. Admins can read and write their own profiles.
     * @path /admin_users/{adminUserId}
     * @allow (get) if isOwner(adminUserId)
     * @allow (create) if isOwner(adminUserId)
     * @allow (update) if isExistingOwner(adminUserId)
     * @allow (delete) if isExistingOwner(adminUserId)
     * @allow (list) if false
     * @deny (get) if !isOwner(adminUserId)
     * @deny (create) if !isOwner(adminUserId)
     * @deny (update) if !isExistingOwner(adminUserId)
     * @deny (delete) if !isExistingOwner(adminUserId)
     * @principle Enforces owner-only access to admin user profiles.
     */
    match /admin_users/{adminUserId} {
      allow get: if isOwner(adminUserId);
      allow list: if false;
      allow create: if isOwner(adminUserId);
      allow update: if isExistingOwner(adminUserId);
      allow delete: if isExistingOwner(adminUserId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
  }
}