/**
 * @fileOverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with admin users having broader permissions.
 * All write operations require authentication.  Read operations are generally public unless admin access is required.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content. Admin-only write access.
 * - /forms/{formId}: Stores form definitions. Admin-only write access.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions. Authenticated users can create submissions.
 * - /admin_users/{adminUserId}: Stores admin user profiles. The existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Only authenticated users can submit forms.
 * - Admin status is determined by the presence of a document in the `/admin_users/{adminUserId}` collection, eliminating the need for `get()` calls in the rules.
 * - Denormalization is used to simplify rules (e.g., storing `formId` in `FormSubmission`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to landing page content. Only admins can create, update, or delete landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow get, list: if true;
     * @allow create: if isAdmin(request.auth.uid);
     * @allow update: if isAdmin(request.auth.uid) && resource != null;
     * @allow delete: if isAdmin(request.auth.uid) && resource != null;
     * @deny create: if !isAdmin(request.auth.uid);
     * @deny update: if !isAdmin(request.auth.uid);
     * @deny delete: if !isAdmin(request.auth.uid);
     * @principle Enforces admin-only access for managing landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create: if isAdmin(request.auth.uid);
      allow update: if isAdmin(request.auth.uid) && resource != null;
      allow delete: if isAdmin(request.auth.uid) && resource != null;
    }

    /**
     * @description Controls access to form definitions. Only admins can create, update, or delete forms.
     * @path /forms/{formId}
     * @allow get, list: if true;
     * @allow create: if isAdmin(request.auth.uid);
     * @allow update: if isAdmin(request.auth.uid) && resource != null;
     * @allow delete: if isAdmin(request.auth.uid) && resource != null;
     * @deny create: if !isAdmin(request.auth.uid);
     * @deny update: if !isAdmin(request.auth.uid);
     * @deny delete: if !isAdmin(request.auth.uid);
     * @principle Enforces admin-only access for managing form definitions.
     */
    match /forms/{formId} {
      allow get, list: if true;
      allow create: if isAdmin(request.auth.uid);
      allow update: if isAdmin(request.auth.uid) && resource != null;
      allow delete: if isAdmin(request.auth.uid) && resource != null;

      /**
       * @description Controls access to form submissions. Authenticated users can create submissions for a form. Admins can read and list submissions.
       * @path /forms/{formId}/form_submissions/{formSubmissionId}
       * @allow get, list: if isAdmin(request.auth.uid);
       * @allow create: if isSignedIn() && request.resource.data.formId == formId;
       * @allow update: if false;
       * @allow delete: if false;
       * @deny create: if !isSignedIn();
       * @deny get: if !isAdmin(request.auth.uid);
       * @deny list: if !isAdmin(request.auth.uid);
       * @deny update: if true;
       * @deny delete: if true;
       * @principle Allows authenticated users to create form submissions and admins to manage them.
       */
      match /form_submissions/{formSubmissionId} {
        allow get, list: if isAdmin(request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.formId == formId;
        allow update: if false;
        allow delete: if false;
      }
    }

    /**
     * @description Controls access to admin user profiles. Only the user themselves can create their profile, and only if they don't already have one.  No updates or deletes are allowed through the rules; these operations are handled through backend functions.
     * @path /admin_users/{adminUserId}
     * @allow get, list: if false;
     * @allow create: if isOwner(adminUserId) && !resource.exists;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if true;
     * @deny list: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Enforces that only the user themselves can create their admin profile, and only once.
     */
    match /admin_users/{adminUserId} {
      allow get, list: if false;
      allow create: if isOwner(adminUserId) && !resource.exists;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admin_users/$(userId));
    }
  }
}