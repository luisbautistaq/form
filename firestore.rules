/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with administrators having broad access and authenticated users being able to submit forms.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content, accessible and editable by admins.
 * - /forms/{formId}: Stores form definitions, accessible and editable by admins.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions as a subcollection of the form.
 * - /admin_users/{adminUserId}: Stores admin user profiles; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Admin privileges are determined by the presence of a document in `/admin_users/{uid}`.
 * - Form submissions are stored as subcollections to enable secure and efficient list operations.
 * - Authorization independence is achieved by storing the `formId` in `FormSubmissions`.
 * - The rules do not enforce strict data validation in this prototyping phase to allow for rapid schema iteration.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in `/admin_users/{uid}`, avoiding `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to read and write landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access for managing landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write form definitions.
     * @path /forms/{formId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access for managing form definitions.
     */
    match /forms/{formId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions. Allows admins to read and write submissions.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create) if isSignedIn() && request.resource.data.formId == __name__.split("/")[5];
     * @allow (get, list, update, delete) if isAdmin();
     * @deny (create) if !isSignedIn()
     * @deny (get, list, update, delete) if !isAdmin()
     * @principle Allows authenticated users to submit forms and admins to manage submissions.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.formId == formId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows creating, reading, updating, and deleting admin users. The existence of a document grants admin privileges.
     * @path /admin_users/{adminUserId}
     * @allow (get) if isAdmin();
     * @allow (list) if false; //Prevent listing of admin users
     * @allow (create) if isSignedIn() && request.auth.uid == adminUserId;
     * @allow (update) if isAdmin();
     * @allow (delete) if isAdmin();
     * @deny (get) if !isAdmin();
     * @deny (create) if !isSignedIn() || request.auth.uid != adminUserId;
     * @deny (update) if !isAdmin();
     * @deny (delete) if !isAdmin();
     * @principle Grants admin privileges based on the existence of a document in this collection.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow list: if false; // Prevent listing of admin users
      allow create: if isSignedIn() && request.auth.uid == adminUserId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }
  }
}