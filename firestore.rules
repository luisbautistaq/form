/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with a focus on separating public content (landing pages),
 * form definitions managed by admins, and user-submitted form data. Admin privileges are granted by the
 * existence of a document in the `/admin_users/{userId}` collection.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Public landing page content, read publicly, managed by admins.
 * - /forms/{formId}: Form definitions, managed by admins.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Form submissions, only created by authenticated users, viewable by admins.
 * - /admin_users/{adminUserId}: Admin user profiles, existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Public read access to landing page content.
 * - Admin-only access to form definitions and form submission data.
 * - Authenticated users can submit forms.
 * - Admin status is determined by document existence, avoiding `get()` calls.
 * - No user listing is allowed for admin users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to landing page content and restricts write access to admins.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny (create, update, delete): if !isAdmin();
     * @principle Allows public read access while restricting writes to admins.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to form definitions to admins only.
     * @path /forms/{formId}
     * @allow (get, list): if isAdmin();
     * @allow (create, update, delete): if isAdmin();
     * @deny (get, list, create, update, delete): if !isAdmin();
     * @principle Enforces admin-only access to form definitions.
     */
    match /forms/{formId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions and restricts read/write access to admins.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create): if isSignedIn();
     * @allow (get, list, update, delete): if isAdmin();
     * @deny (get, list, update, delete): if !isAdmin();
     * @principle Allows authenticated users to submit forms, while restricting access to admins.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow create: if isSignedIn();
      allow get, list, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to admin user profiles and only allows creation/updates/deletes by other admins.
     * @path /admin_users/{adminUserId}
     * @allow (get): if isAdmin();
     * @allow (create): if isAdmin();
     * @allow (update): if isAdmin() && resource != null;
     * @allow (delete): if isAdmin() && resource != null;
     * @deny (list): if true;
     * @principle Enforces admin-only access to admin user profiles, preventing unauthorized modifications and listing.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
      allow list: if false;
    }

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
  }
}