/**
 * @file Overview
 * This ruleset enforces a role-based access control model with an admin override.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content, accessible and editable by admins.
 * - /forms/{formId}: Stores form definitions, accessible and editable by admins.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions, only createable by authenticated users.
 * - /admin_users/{adminUserId}: Presence of document grants admin privileges.
 *
 * Key Security Decisions:
 * - Only authenticated users can submit forms.
 * - Listing of landing pages and forms is allowed for all users.
 * - Form submissions are stored as subcollections to enable secure list operations (admins only).
 * - Admin status is determined by the presence of a document in /admin_users/{uid}, eliminating the need for get() calls in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to read and write landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): if isSignedIn() && isAdmin(request.auth.uid);
     * @allow (create, update, delete): if isSignedIn() && isAdmin(request.auth.uid);
     * @deny (get, list): if !isSignedIn() || !isAdmin(request.auth.uid);
     * @deny (create, update, delete): if !isSignedIn() || !isAdmin(request.auth.uid);
     * @principle Role-based access control; Admin users can manage landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows admins to read and write form definitions.
     * @path /forms/{formId}
     * @allow (get, list): if isSignedIn() && isAdmin(request.auth.uid);
     * @allow (create, update, delete): if isSignedIn() && isAdmin(request.auth.uid);
     * @deny (get, list): if !isSignedIn() || !isAdmin(request.auth.uid);
     * @deny (create, update, delete): if !isSignedIn() || !isAdmin(request.auth.uid);
     * @principle Role-based access control; Admin users can manage form definitions.
     */
    match /forms/{formId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows authenticated users to create form submissions. Admins can read/write all submissions.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create): if isSignedIn();
     * @allow (get, list, update, delete): if isSignedIn() && isAdmin(request.auth.uid);
     * @deny (create): if !isSignedIn();
     * @deny (get, list, update, delete): if !isSignedIn() || !isAdmin(request.auth.uid);
     * @principle Authenticated users can submit forms; Admins can manage all submissions.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get, list: if isSignedIn() && isAdmin(request.auth.uid);
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Allows admins to read and write admin user profiles. The existence of a profile grants admin privileges.
     * @path /admin_users/{adminUserId}
     * @allow (get, list, create, update, delete): if isSignedIn() && isAdmin(request.auth.uid);
     * @deny (get, list, create, update, delete): if !isSignedIn() || !isAdmin(request.auth.uid);
     * @principle Role-based access control; Only admins can manage other admin profiles.
     */
    match /admin_users/{adminUserId} {
      allow get, list: if isSignedIn() && isAdmin(request.auth.uid);
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     * @example isSignedIn() == true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator. Admin status is determined by the presence of a document in /admin_users/{uid}.
     * @param {string} userId - The user ID to check.
     * @return {bool} True if the user is an administrator, false otherwise.
     * @example isAdmin("some_user_id") == true if exists(/databases/$(database)/documents/admin_users/some_user_id)
     */
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admin_users/$(userId));
    }
  }
}