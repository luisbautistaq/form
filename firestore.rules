/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy: This ruleset enforces a role-based access control model.
 *   - Admin users, identified by their presence in the `admin_users` collection, have full access to all data.
 *   - Anonymous and authenticated users can create form submissions for existing forms.
 *   - Regular users cannot directly read or write to `forms` or `landing_page_contents`.
 *
 * Data Structure:
 *   - /landing_page_contents/{landingPageContentId}: Stores landing page content, accessible and editable by admins.
 *   - /forms/{formId}: Stores form definitions, accessible and editable by admins.
 *   - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions, created by authenticated users.
 *   - /admin_users/{adminUserId}: Stores admin user profiles.
 *
 * Key Security Decisions:
 *   - Admin privileges are determined by the existence of a document in the `/admin_users/{uid}` collection.
 *   - Regular users can only create form submissions.
 *   - Listing of form submissions is restricted to admins.
 *   - No public data.
 *
 * Denormalization for Authorization:
 *   - `formId` is denormalized into the `form_submissions` documents to enable efficient security rules without extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the presence of their ID in the admin_users collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    /**
     * @description Checks if the form exists.
     * @param {string} formId - The ID of the form to check.
     * @return {bool} True if the form exists, false otherwise.
     */
    function formExists(formId) {
      return exists(/databases/$(database)/documents/forms/$(formId));
    }

    /**
     * @description Rules for the /landing_page_contents/{landingPageContentId} collection.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get) User is an admin.
     * @allow (create) User is an admin.
     * @deny (get) User is not an admin.
     * @deny (create) User is not an admin.
     * @principle Enforces admin-only access to landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /forms/{formId} collection.
     * @path /forms/{formId}
     * @allow (get) User is an admin.
     * @allow (create) User is an admin.
     * @deny (get) User is not an admin.
     * @deny (create) User is not an admin.
     * @principle Enforces admin-only access to form definitions.
     */
    match /forms/{formId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /forms/{formId}/form_submissions/{formSubmissionId} collection.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create) User is signed in and the form exists.
     * @deny (create) User is not signed in.
     * @deny (create) The form does not exist.
     * @principle Allows authenticated users to create form submissions for existing forms.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && formExists(formId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /admin_users/{adminUserId} collection.
     * @path /admin_users/{adminUserId}
     * @allow (get) User is an admin.
     * @allow (create) User ID matches authenticated user ID.
     * @deny (get) User is not an admin.
     * @deny (create) User ID does not match authenticated user ID.
     * @principle Restricts access to admin user profiles.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if request.auth.uid == adminUserId;
      allow update: if false;
      allow delete: if false;
    }
  }
}