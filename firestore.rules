/**
 * @file Overview
 * This ruleset enforces a role-based access control model with admin privileges determined by the existence of an AdminUser document.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content.
 * - /forms/{formId}: Stores form definitions.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions.
 * - /admin_users/{adminUserId}: Stores admin user profiles; existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Admin privileges are granted based on the existence of a document in the /admin_users/{uid} collection.
 * - All write operations on /landing_page_contents and /forms are restricted to admins.
 * - Form submissions are allowed for authenticated users.
 *
 * Denormalization for Authorization:
 * - The formId is denormalized in the FormSubmission documents to allow authorization checks without needing to fetch the parent Form document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read and write access to landing page content only to admins.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): if isAdmin()
     * @allow (create, update, delete): if isAdmin()
     * @deny (get, list): if !isAdmin()
     * @deny (create, update, delete): if !isAdmin()
     * @principle Enforces admin-only access for managing landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants read and write access to forms only to admins.
     * @path /forms/{formId}
     * @allow (get, list): if isAdmin()
     * @allow (create, update, delete): if isAdmin()
     * @deny (get, list): if !isAdmin()
     * @deny (create, update, delete): if !isAdmin()
     * @principle Enforces admin-only access for managing forms.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions and admins to read and manage them.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow create: if isSignedIn();
     * @allow get, list, update, delete: if isAdmin();
     * @deny get, list, update, delete: if !isAdmin()
     * @deny create: if !isSignedIn()
     * @principle Allows submissions from authenticated users and admin management.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Grants read and write access to admin user profiles only to themselves.  Allows self-creation.
     * @path /admin_users/{adminUserId}
     * @allow create: if isOwner(adminUserId);
     * @allow get, list, update, delete: if isOwner(adminUserId);
     * @deny get, list, update, delete: if !isOwner(adminUserId);
     * @deny create: if !isOwner(adminUserId);
     * @principle Enforces user-ownership for admin user profiles.
     */
    match /admin_users/{adminUserId} {
      allow get, list: if isOwner(adminUserId);
      allow create: if isOwner(adminUserId);
      allow update, delete: if isExistingOwner(adminUserId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator.
     * @return {bool} True if the user is an admin, false otherwise.
     * @example:
     *   isAdmin() == true  // When the user's UID exists as a document in /admin_users.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     * @example:
     *   isOwner('user123') == true  // When request.auth.uid == 'user123'.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}