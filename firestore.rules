/**
 * @file Firebase Security Rules for FormForge application.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with administrators having broad access and authenticated users being able to create data.
 * Data is segregated into collections based on function and access requirements.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores public landing page content.
 * - /forms/{formId}: Stores form definitions.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions, nested under their respective forms.
 * - /admin_users/{adminUserId}: Stores admin user profiles; presence confers admin rights.
 *
 * Key Security Decisions:
 * - Listing of documents in the `/admin_users` collection is explicitly denied.
 * - Admin status is determined by the presence of a document in `/admin_users/{userId}`.
 * - All write operations are protected by authentication checks.
 * - Form submissions include the `formId` to simplify authorization checks without requiring extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access to landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage form definitions.
     * @path /forms/{formId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access to form definitions.
     */
    match /forms/{formId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions for existing forms, and admins to manage all submissions.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (get, list) if isAdmin()
     * @allow create if isSignedIn() && request.resource.data.formId == formId;
     * @allow update, delete: if isAdmin() && resource != null;
     * @deny get, list: if !isAdmin()
     * @deny create: if !isSignedIn() || request.resource.data.formId != formId;
     * @deny update, delete: if !isAdmin() || resource == null;
     * @principle Enforces that only admins can read/write and authenticated users can create submissions
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get, list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.formId == formId;
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage admin user profiles.
     * @path /admin_users/{adminUserId}
     * @allow get: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny list: if true;
     * @deny get: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces admin-only access to admin user profiles.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow create, update, delete: if isAdmin();
      allow list: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator.
     * @return True if the user is an administrator, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }
  }
}