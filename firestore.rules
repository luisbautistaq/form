/**
 * @file Firebase Security Rules for FormForge application.
 *
 * @core_philosophy This ruleset enforces role-based access control, with administrators having full access and authenticated users being able to submit forms.
 * Data is structured to support secure and efficient access, with form submissions stored as subcollections under their respective forms.
 *
 * @data_structure
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content, accessible by admins.
 * - /forms/{formId}: Stores form definitions, accessible by admins.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions. Authenticated users can create submissions. Admins can read all submissions.
 * - /admin_users/{adminUserId}: Presence of a document grants admin privileges.
 *
 * @key_security_decisions
 * - Admin privileges are determined by the existence of a document in the /admin_users/{adminUserId} collection.
 * - Form submissions are stored as subcollections to enable secure list operations and enforce authorization.
 * - Users must be authenticated to submit forms.
 *
 * @denormalization
 * - The `formId` is denormalized into the `FormSubmission` documents to avoid costly `get()` calls when checking authorization.
 *
 * @structural_segregation
 * - Landing page content and form definitions are stored in separate collections to allow independent updates and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage landing page content.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list) if isAdmin() - Allows an admin to read landing page content.
     * @allow (create, update, delete) if isAdmin() - Allows an admin to modify landing page content.
     * @deny (get, list) if !isAdmin() - Denies non-admins from reading landing page content.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from modifying landing page content.
     * @principle Enforces role-based access control, restricting landing page content management to admins.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage forms.
     * @path /forms/{formId}
     * @allow (get, list) if isAdmin() - Allows an admin to read form definitions.
     * @allow (create, update, delete) if isAdmin() - Allows an admin to modify form definitions.
     * @deny (get, list) if !isAdmin() - Denies non-admins from reading form definitions.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from modifying landing page content.
     * @principle Enforces role-based access control, restricting form management to admins.
     */
    match /forms/{formId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to create form submissions and admins to manage them.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow create: if isSignedIn() - Allows authenticated users to create form submissions.
     * @allow get: if isAdmin() - Allows admins to read any form submission.
     * @allow list: if isAdmin() - Allows admins to list all form submissions for any form.
     * @allow update: if isAdmin() - Allows admins to update form submissions.
     * @allow delete: if isAdmin() - Allows admins to delete form submissions.
     * @deny create: if !isSignedIn() - Denies unauthenticated users from creating form submissions.
     * @deny get: if !isAdmin() - Denies non-admins from reading form submissions.
     * @deny list: if !isAdmin() - Denies non-admins from listing form submissions.
     * @deny update: if !isAdmin() - Denies non-admins from updating form submissions.
     * @deny delete: if !isAdmin() - Denies non-admins from deleting form submissions.
     * @principle Enforces authentication for form submissions and restricts management to admins.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage admin users.
     * @path /admin_users/{adminUserId}
     * @allow get: if isAdmin() - Allows an admin to read admin user profiles.
     * @allow list: if isAdmin() - Allows an admin to list all admin users.
     * @allow create: if isAdmin() - Allows an admin to create new admin users.
     * @allow update: if isAdmin() - Allows an admin to update admin user profiles.
     * @allow delete: if isAdmin() - Allows an admin to delete admin users.
     * @deny get: if !isAdmin() - Denies non-admins from reading admin user profiles.
     * @deny list: if !isAdmin() - Denies non-admins from listing admin users.
     * @deny create: if !isAdmin() - Denies non-admins from creating admin users.
     * @deny update: if !isAdmin() - Denies non-admins from updating admin user profiles.
     * @deny delete: if !isAdmin() - Denies non-admins from deleting admin users.
     * @principle Enforces role-based access control, restricting admin user management to existing admins.
     */
    match /admin_users/{adminUserId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

   /**
    * @description Checks if the current user is an admin by verifying the existence of their document in the /admin_users collection.
    * @return {bool} True if the user is an admin, false otherwise.
    * @example isAdmin() == true - The user is an admin.
    * @example isAdmin() == false - The user is not an admin.
    * @principle Role-based access control.
    */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     * @example isSignedIn() == true - The user is signed in.
     * @example isSignedIn() == false - The user is not signed in.
     * @principle Authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     * @example isOwner('user123') == true - The user's UID matches 'user123'.
     * @example isOwner('user456') == false - The user's UID does not match 'user456'.
     * @principle Document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is the owner of the resource, and that the document exists.
      * @param {string} userId - The user ID to compare against the request's authentication UID.
      * @return {bool} True if the user is the owner and the document exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}