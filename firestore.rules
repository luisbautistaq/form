/**
 * @fileoverview Firestore Security Rules for FormForge.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with admin privileges determined by the presence of a document in the `admin_users` collection.
 * Data is segregated into landing pages, forms, and form submissions, with form submissions stored as subcollections of forms to allow for secure listing.
 *
 * Data Structure:
 * - /landing_page_contents/{landingPageContentId}: Stores landing page content.
 * - /forms/{formId}: Stores form definitions.
 * - /forms/{formId}/form_submissions/{formSubmissionId}: Stores form submissions, denormalized with `formId`.
 * - /admin_users/{adminUserId}: Stores admin user profiles.
 *
 * Key Security Decisions:
 * - Admin privileges are granted solely based on the existence of a document in `/admin_users/{adminUserId}`.
 * - Listing landing pages and forms is publicly available.
 * - Only admins can create, update, or delete landing pages and forms.
 * - Only authenticated users can create form submissions.
 * - Anyone can read form submissions
 *
 * Denormalization for Authorization:
 * - The `formId` is denormalized into the `FormSubmission` documents to allow rules to check the existence of a form before allowing submissions without extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated (user is signed in).
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the existence of their document in the admin_users collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin_users/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided userId.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and if the document exists.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /landing_page_contents/{landingPageContentId} collection.
     * @path /landing_page_contents/{landingPageContentId}
     * @allow (get, list): Anyone can read landing page content.
     * @allow (create, update, delete): Only admins can modify landing page content.
     * @deny (create, update, delete): Non-admins cannot modify landing page content.
     * @principle Enforces admin-only writes for landing page content.
     */
    match /landing_page_contents/{landingPageContentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /forms/{formId} collection.
     * @path /forms/{formId}
     * @allow (get, list): Anyone can read form definitions.
     * @allow (create, update, delete): Only admins can modify form definitions.
     * @deny (create, update, delete): Non-admins cannot modify form definitions.
     * @principle Enforces admin-only writes for form definitions.
     */
    match /forms/{formId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /forms/{formId}/form_submissions/{formSubmissionId} collection.
     * @path /forms/{formId}/form_submissions/{formSubmissionId}
     * @allow (create): Only authenticated users can create form submissions.  Must enforce formId consistency.
     * @allow (get):  Anyone can read.
     * @allow (list): Only an admin can list form submissions
     * @deny (create): Unauthenticated users cannot create form submissions.
     * @deny (update, delete): Only admins can update or delete form submissions.
     * @principle Enforces authenticated-user-only creates and admin-only updates/deletes for form submissions.
     */
    match /forms/{formId}/form_submissions/{formSubmissionId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.formId == formId;
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /admin_users/{adminUserId} collection.
     * @path /admin_users/{adminUserId}
     * @allow (get): Only the admin user can get their own document.
     * @allow (create): Only the user themselves can create their admin user document.
     * @deny (list, update, delete): Listing, updating, and deleting admin user documents is not allowed.
     * @principle Enforces that only the admin user can manage their own admin user document.
     */
    match /admin_users/{adminUserId} {
      allow get: if request.auth.uid == adminUserId;
      allow create: if request.auth.uid == adminUserId;
      allow list, update, delete: if false;
    }
  }
}